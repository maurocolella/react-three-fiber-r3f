{"ast":null,"code":"import * as THREE from 'three';\nexport default {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    lightPosition: {\n      value: new THREE.Vector2(0.5, 0.75)\n    },\n    exposure: {\n      value: 0.18\n    },\n    decay: {\n      value: 0.95\n    },\n    density: {\n      value: 0.75\n    },\n    weight: {\n      value: 0.4\n    },\n    samples: {\n      value: 50\n    }\n  },\n  vertexShader: \"\\n    varying vec2 vUv;\\n    void main() {\\n      vUv = uv;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n    }\",\n  fragmentShader: \"\\n    varying vec2 vUv;\\n    uniform sampler2D tDiffuse;\\n    uniform vec2 lightPosition;\\n    uniform float exposure;\\n    uniform float decay;\\n    uniform float density;\\n    uniform float weight;\\n    uniform int samples;\\n    const int MAX_SAMPLES = 100;\\n    void main()\\n    {\\n      vec2 texCoord = vUv;\\n      vec2 deltaTextCoord = texCoord - lightPosition;\\n      deltaTextCoord *= 1.0 / float(samples) * density;\\n      vec4 color = texture2D(tDiffuse, texCoord);\\n      float illuminationDecay = 1.0;\\n      for(int i=0; i < MAX_SAMPLES; i++) {\\n        if(i == samples) break;\\n        texCoord -= deltaTextCoord;\\n        vec4 sample = texture2D(tDiffuse, texCoord);\\n        sample *= illuminationDecay * weight;\\n        color += sample;\\n        illuminationDecay *= decay;\\n      }\\n      gl_FragColor = color * exposure;\\n    }\"\n};","map":{"version":3,"sources":["/run/media/argo/Data/_dev_from_drive_D/_scratchpad/r3f-volumetric-light/src/shaders/VolumetricLightShader.js"],"names":["THREE","uniforms","tDiffuse","value","lightPosition","Vector2","exposure","decay","density","weight","samples","vertexShader","fragmentShader"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,eAAe;AACbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADF;AAERC,IAAAA,aAAa,EAAE;AAAED,MAAAA,KAAK,EAAE,IAAIH,KAAK,CAACK,OAAV,CAAkB,GAAlB,EAAuB,IAAvB;AAAT,KAFP;AAGRC,IAAAA,QAAQ,EAAE;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAHF;AAIRI,IAAAA,KAAK,EAAE;AAAEJ,MAAAA,KAAK,EAAE;AAAT,KAJC;AAKRK,IAAAA,OAAO,EAAE;AAAEL,MAAAA,KAAK,EAAE;AAAT,KALD;AAMRM,IAAAA,MAAM,EAAE;AAAEN,MAAAA,KAAK,EAAE;AAAT,KANA;AAORO,IAAAA,OAAO,EAAE;AAAEP,MAAAA,KAAK,EAAE;AAAT;AAPD,GADG;AAWbQ,EAAAA,YAAY,uJAXC;AAkBbC,EAAAA,cAAc;AAlBD,CAAf","sourcesContent":["import * as THREE from 'three'\n\nexport default {\n  uniforms: {\n    tDiffuse: { value: null },\n    lightPosition: { value: new THREE.Vector2(0.5, 0.75) },\n    exposure: { value: 0.18 },\n    decay: { value: 0.95 },\n    density: { value: 0.75 },\n    weight: { value: 0.4 },\n    samples: { value: 50 }\n  },\n\n  vertexShader: `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }`,\n\n  fragmentShader: `\n    varying vec2 vUv;\n    uniform sampler2D tDiffuse;\n    uniform vec2 lightPosition;\n    uniform float exposure;\n    uniform float decay;\n    uniform float density;\n    uniform float weight;\n    uniform int samples;\n    const int MAX_SAMPLES = 100;\n    void main()\n    {\n      vec2 texCoord = vUv;\n      vec2 deltaTextCoord = texCoord - lightPosition;\n      deltaTextCoord *= 1.0 / float(samples) * density;\n      vec4 color = texture2D(tDiffuse, texCoord);\n      float illuminationDecay = 1.0;\n      for(int i=0; i < MAX_SAMPLES; i++) {\n        if(i == samples) break;\n        texCoord -= deltaTextCoord;\n        vec4 sample = texture2D(tDiffuse, texCoord);\n        sample *= illuminationDecay * weight;\n        color += sample;\n        illuminationDecay *= decay;\n      }\n      gl_FragColor = color * exposure;\n    }`\n}\n"]},"metadata":{},"sourceType":"module"}